@page "/racun/uredi"

@inject NavigationManager NavigationManager
@inject IAccountApiCall AccountApiCall
@inject NotificationService NotificationService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider
<Header Title="Novi Račun" />

<div class="container-fluid mx-0 px-0">
    <div class="row justify-content-center mx-0">
        <div class="col-11 col-md-6 col-lg-5 p-3 border bg-light shadow rounded mt-5 " style="max-width:450px;">
            <h2 class="text-center mb-4 border-bottom pb-4">Uredi informacije profila</h2>
            @*<div class="alert alert-danger" role="alert">
                    This is a danger alert—check it out!
                </div>*@
            <RadzenTemplateForm TItem="UserDTO" Data="@userDTO" Submit="ValidSubmit">


                <div class="form-group">
                    <div class="d-inline-block statenum-field-size">
                        <label for="statenum">Pozivni</label>
                        <select @bind="selectedPhoneValue" class="form-control" style="border-color: gray; height:35px;" id="statenum">
                            <option value="+47">+47</option>
                            <option value="+385">+385</option>
                        </select>
                    </div>
                    <div style="float:right" class="d-inline-block phone-field-size">
                        <RadzenLabel Text="Telefon" for="phone" /><small class="text-success">( nije obavezan )</small>
                        <br />
                        <div>
                            <RadzenNumeric ShowUpDown="false" class="form-control" Style="border-color:gray" Name="PhoneNumber" @bind-Value="phoneNumber" />
                            <div>
                                <Condition Evaluation="phoneNumber.HasValue">
                                    <Match>
                                        <RadzenNumericRangeValidator Component="PhoneNumber" Min="100000" Max="9999999999" Text="Od 6 do 10 znamenki" Popup=false Style="position: absolute; margin-top:2px;" />
                                    </Match>
                                </Condition>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div style="width: 48%;" class="d-inline-block ">
                        <RadzenLabel Text="Ime" for="firstname" />
                        <RadzenTextBox class="form-control" Style="border-color:gray" Name="FirstName" @bind-Value="userDTO.FirstName" id="firstname" />
                        <Condition Evaluation="string.IsNullOrEmpty(userDTO.FirstName)">
                            <Match>
                                <RadzenRequiredValidator Component="FirstName" Text="Ime je obavezano" Popup=false Style="position: absolute; margin-top:2px;" />
                            </Match>
                            <NotMatch>
                                <RadzenLengthValidator Component="FirstName" Max="20" Text="Najviše 20 znakova" Popup=false Style="position: absolute; margin-top:2px;" />
                            </NotMatch>
                        </Condition>
                    </div>
                    <div style="width: 48%;" class="d-inline-block float-right">
                        <RadzenLabel Text="Prezime" for="lastname" />
                        <RadzenTextBox class="form-control" Style="border-color:gray" Name="LastName" @bind-Value="userDTO.LastName" id="lastname" />
                        <Condition Evaluation="string.IsNullOrEmpty(userDTO.LastName)">
                            <Match>
                                <RadzenRequiredValidator Component="LastName" Text="Prezime je obavezano" Popup=false Style="position: absolute; margin-top:2px;" />
                            </Match>
                            <NotMatch>
                                <RadzenLengthValidator Component="LastName" Max="20" Text="Najviše 20 znakova" Popup=false Style="position: absolute; margin-top:2px;" />
                            </NotMatch>
                        </Condition>
                    </div>
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Adresa ( Ulica i Broj )" for="address" />
                    <RadzenTextBox class="form-control" Style="border-color:gray" Name="Address" @bind-Value="userDTO.Street" id="address" />
                    <Condition Evaluation="string.IsNullOrEmpty(userDTO.Street)">
                        <Match>
                            <RadzenRequiredValidator Component="Address" Text="Adresa je obavezana" Popup=false Style="position: absolute; margin-top:2px;" />
                        </Match>
                        <NotMatch>
                            <RadzenLengthValidator Component="Address" Max="60" Text="Najviše 60 znakova" Popup=false Style="position: absolute; margin-top:2px;" />
                        </NotMatch>
                    </Condition>
                </div>

                <div class="form-group">
                    <div style="width: 48%;" class="d-inline-block float-right">
                        <RadzenLabel Text="Poštanski Broj" for="postnum" />

                        <RadzenNumeric ShowUpDown="false" class="form-control" Style="border-color:gray" Name="PostNum" @bind-Value="postNumber" />
                        <div>
                            <Condition Evaluation="postNumber.HasValue">
                                <Match>
                                    <RadzenNumericRangeValidator Component="PostNum" Min="1000" Max="999999" Text="Od 6 do 10 znamenki" Popup=false Style="position: absolute; margin-top:2px;" />
                                </Match>
                                <NotMatch>
                                    <RadzenRequiredValidator Component="PostNum" Text="Polje je obavezano" Popup=false Style="position: absolute; margin-top:2px;" />
                                </NotMatch>
                            </Condition>
                        </div>
                    </div>


                    <div style="width: 48%;" class="d-inline-block">
                        <RadzenLabel Text="Grad / Selo" for="city" />
                        <RadzenTextBox class="form-control" Style="border-color:gray" Name="City" @bind-Value="userDTO.City" id="city" />
                        <Condition Evaluation="string.IsNullOrEmpty(userDTO.City)">
                            <Match>
                                <RadzenRequiredValidator Component="City" Text="Polje je obavezano" Popup=false Style="position: absolute; margin-top:2px;" />
                            </Match>
                            <NotMatch>
                                <RadzenLengthValidator Component="City" Max="60" Text="Najviše 60 znakova" Popup=false Style="position: absolute; margin-top:2px;" />
                            </NotMatch>
                        </Condition>
                    </div>
                </div>




                <div class="pt-3">
                    <button class="btn btn-primary btn-block"> Spremi podatke i odjavi se  </button>
                </div>
                <div class="pt-3">
                    <button @onclick="@(()=>NavigationManager.NavigateTo("/profil"))" class="btn btn-secondary btn-block">  Nazad </button>
                </div>
            </RadzenTemplateForm>
        </div>
    </div>
</div>


@code {

    long? phoneNumber;
    int? postNumber;
    string selectedPhoneValue = "+47";

    UserDTO userDTO = new UserDTO();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {

            var apiResponse = await AccountApiCall.GetUserByIdAsync(int.Parse(
                authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier).Value));
            if (apiResponse.Success)
            {
                userDTO = apiResponse.Content;
                postNumber = userDTO.PostNum;
                phoneNumber = int.Parse(userDTO.Phone.Split("/").Last());
            }
        }
    }

    private async Task ValidSubmit()
    {
        userDTO.PostNum = postNumber.Value;
        @if (phoneNumber.HasValue)
            userDTO.Phone = selectedPhoneValue + "/" + phoneNumber.Value.ToString();

        var result = await AccountApiCall.UpdateAccountAsync(userDTO);

        if (result.Success)
        {
            await AccountApiCall.SignOutAsync();
            NavigationManager.NavigateTo("/prijava");
        }



    }



}


